{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-02-14T12:12:08.286886Z","iopub.execute_input":"2023-02-14T12:12:08.287218Z","iopub.status.idle":"2023-02-14T12:12:08.352588Z","shell.execute_reply.started":"2023-02-14T12:12:08.287140Z","shell.execute_reply":"2023-02-14T12:12:08.351456Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/ml-mutational-learning/LY16_test_data.csv\n/kaggle/input/ml-mutational-learning/media-4.xlsx\n/kaggle/input/ml-mutational-learning/LY16_train_data.csv\n/kaggle/input/ml-mutational-learning/ACE2_test_data.csv\n/kaggle/input/ml-mutational-learning/media-1.xlsx\n/kaggle/input/ml-mutational-learning/REGN87_test_data.csv\n/kaggle/input/ml-mutational-learning/LY16_unseen.tsv\n/kaggle/input/ml-mutational-learning/P0DTC2.fasta.txt\n/kaggle/input/ml-mutational-learning/mmc2.csv\n/kaggle/input/ml-mutational-learning/REGN87_unseen.tsv\n/kaggle/input/ml-mutational-learning/ACE2_train_data.csv\n/kaggle/input/ml-mutational-learning/REGN87_train_data.csv\n/kaggle/input/ml-mutational-learning/encoded_seqs_train.npy\n/kaggle/input/ml-mutational-learning/REGN33_train_data.csv\n/kaggle/input/ml-mutational-learning/encoded_seqs_unseen.npy\n/kaggle/input/ml-mutational-learning/REGN33_test_data.csv\n/kaggle/input/ml-mutational-learning/media-3.xlsx\n/kaggle/input/ml-mutational-learning/encoded_seqs_test.npy\n/kaggle/input/ml-mutational-learning/media-6.xlsx\n/kaggle/input/ml-mutational-learning/REGN33_unseen.tsv\n/kaggle/input/ml-mutational-learning/ACE2_unseen.tsv\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch.nn as nn\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nimport numpy as np\nimport pandas as pd\nimport random\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:12:50.135464Z","iopub.execute_input":"2023-02-14T12:12:50.136207Z","iopub.status.idle":"2023-02-14T12:12:53.763709Z","shell.execute_reply.started":"2023-02-14T12:12:50.136170Z","shell.execute_reply":"2023-02-14T12:12:53.762755Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/ml-mutational-learning/REGN33_train_data.csv\")\ntest = pd.read_csv(\"/kaggle/input/ml-mutational-learning/REGN33_test_data.csv\")\nunseen = pd.read_csv(\"/kaggle/input/ml-mutational-learning/REGN33_unseen.tsv\", sep = '\\t')","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:13:43.290516Z","iopub.execute_input":"2023-02-14T12:13:43.291312Z","iopub.status.idle":"2023-02-14T12:13:43.526661Z","shell.execute_reply.started":"2023-02-14T12:13:43.291273Z","shell.execute_reply":"2023-02-14T12:13:43.525605Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"low_test = test[test.Distance <= 5]\nhigh_test = test[test.Distance > 5]","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:13:44.188188Z","iopub.execute_input":"2023-02-14T12:13:44.188597Z","iopub.status.idle":"2023-02-14T12:13:44.199918Z","shell.execute_reply.started":"2023-02-14T12:13:44.188559Z","shell.execute_reply":"2023-02-14T12:13:44.198918Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"list(train.columns)","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:16:16.361068Z","iopub.execute_input":"2023-02-14T12:16:16.361457Z","iopub.status.idle":"2023-02-14T12:16:16.368781Z","shell.execute_reply.started":"2023-02-14T12:16:16.361421Z","shell.execute_reply":"2023-02-14T12:16:16.367372Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"['Unnamed: 0',\n 'junction_aa',\n 'v_call',\n 'consensus_count',\n 'j_call',\n 'clonal_frequency',\n 'Label',\n 'Distance',\n 'Antibody']"},"metadata":{}}]},{"cell_type":"code","source":"def process_df(df):\n    df.columns = [\"unkn\", \"seq\", \"v_call\", \"consensus_count\", 'j_call', 'clonal_frequency', \"Label\", \"Distance\", \"ab\"]\n    # Function to encode sequences\n    def encode_seq(sequence):\n      alphabet = ['A', 'C', 'D', 'E', 'F', 'G','H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']\n      char_to_int = dict((c, i) for i, c in enumerate(alphabet))\n      integer_encoded = [char_to_int[char] for char in sequence]\n      onehot_encoded = list()\n      for value in integer_encoded:\n          letter = [0 for _ in range(len(alphabet))]\n          letter[value] = 1\n          onehot_encoded.append(letter)\n      return np.array(onehot_encoded)\n    df['Encoded_Sequences'] = df.seq.apply(lambda x: encode_seq(x))\n    features = []\n    for arr in list(df.Encoded_Sequences):\n        features.append(arr)\n    features = np.array(features)\n    labels = np.array(list(df.Label))\n    features = torch.from_numpy(features)\n    labels = torch.from_numpy(labels)\n    features = features.float()\n    return features, labels","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:16:53.443465Z","iopub.execute_input":"2023-02-14T12:16:53.444209Z","iopub.status.idle":"2023-02-14T12:16:53.454662Z","shell.execute_reply.started":"2023-02-14T12:16:53.444170Z","shell.execute_reply":"2023-02-14T12:16:53.453559Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"X_train, y_train = process_df(train)","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:16:54.941148Z","iopub.execute_input":"2023-02-14T12:16:54.941542Z","iopub.status.idle":"2023-02-14T12:17:06.839243Z","shell.execute_reply.started":"2023-02-14T12:16:54.941486Z","shell.execute_reply":"2023-02-14T12:17:06.838169Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"X_test, y_test = process_df(test)\nX_test_lw, y_test_lw = process_df(low_test)\nX_test_hi, y_test_hi = process_df(high_test)","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:17:12.554422Z","iopub.execute_input":"2023-02-14T12:17:12.555046Z","iopub.status.idle":"2023-02-14T12:17:14.804159Z","shell.execute_reply.started":"2023-02-14T12:17:12.555007Z","shell.execute_reply":"2023-02-14T12:17:14.803092Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  \n","output_type":"stream"}]},{"cell_type":"code","source":"SEED = 0xDEAD\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntorch.random.manual_seed(SEED)\ntorch.cuda.random.manual_seed_all(SEED)","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:17:19.530132Z","iopub.execute_input":"2023-02-14T12:17:19.530529Z","iopub.status.idle":"2023-02-14T12:17:19.541062Z","shell.execute_reply.started":"2023-02-14T12:17:19.530493Z","shell.execute_reply":"2023-02-14T12:17:19.539937Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"class My_Data(Dataset):\n    def __init__(self, features, labels):\n        self.features = features\n        self.labels = labels\n    def __len__(self):\n        return len(self.features)\n    def __getitem__(self, idx):\n        sample = {'features': self.features[idx], 'labels': self.labels[idx]}\n        return sample","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:17:28.040046Z","iopub.execute_input":"2023-02-14T12:17:28.040421Z","iopub.status.idle":"2023-02-14T12:17:28.047640Z","shell.execute_reply.started":"2023-02-14T12:17:28.040388Z","shell.execute_reply":"2023-02-14T12:17:28.046562Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"train_dataset = My_Data(X_train, y_train)\ntest_dataset = My_Data(X_test, y_test)\ntest_lw = My_Data(X_test_lw, y_test_lw)\ntest_hi = My_Data(X_test_hi, y_test_hi)\ntrainloader = DataLoader(train_dataset, batch_size=150,\n                        shuffle=True, num_workers=2)\n\ntestloader = DataLoader(test_dataset, batch_size=150,\n                        shuffle=False, num_workers=2)\ntestloader_lw = DataLoader(test_lw, batch_size=150,\n                        shuffle=False, num_workers=2)\ntestloader_hw = DataLoader(test_hi, batch_size=150,\n                        shuffle=False, num_workers=2)","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:18:02.906794Z","iopub.execute_input":"2023-02-14T12:18:02.907200Z","iopub.status.idle":"2023-02-14T12:18:02.914760Z","shell.execute_reply.started":"2023-02-14T12:18:02.907167Z","shell.execute_reply":"2023-02-14T12:18:02.913589Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"class CNNModel(nn.Module):\n    def __init__(self, embed_size, hidden_size, num_classes=1):\n        super().__init__()\n        self.cnn = nn.Sequential(\n            nn.Conv1d(embed_size, hidden_size, kernel_size=3, padding=1, stride=2),\n            nn.BatchNorm1d(hidden_size),\n            nn.ReLU(),\n            nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=1, stride=2),\n            nn.BatchNorm1d(hidden_size),\n            nn.ReLU(),\n            nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=1, stride=2),\n            nn.BatchNorm1d(hidden_size),\n            nn.ReLU(),\n            nn.AdaptiveMaxPool1d(1),\n            nn.Flatten(),\n        )\n        self.cl = nn.Sequential(\n            nn.Linear(hidden_size, num_classes)\n        )\n\n    def forward(self, x):\n        x = x.permute(0, 2, 1)\n        x = self.cnn(x)\n        prediction = self.cl(x)\n        return prediction","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:18:26.640247Z","iopub.execute_input":"2023-02-14T12:18:26.640660Z","iopub.status.idle":"2023-02-14T12:18:26.649411Z","shell.execute_reply.started":"2023-02-14T12:18:26.640626Z","shell.execute_reply":"2023-02-14T12:18:26.648322Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"from tqdm.notebook import tqdm, trange\n\ndef training(model, criterion, optimizer, num_epochs, trainloader, testloader):\n    for e in trange(num_epochs, leave=False):\n        model.train()\n        num_iter = 0\n        train_loss = 0\n        for batch in trainloader:\n            optimizer.zero_grad()\n            input_embeds = batch[\"features\"].to(device)\n            labels = batch[\"labels\"].to(device)\n            labels = labels.unsqueeze(1)\n            labels = labels.float()\n            prediction = model(input_embeds)\n            loss = criterion(prediction, labels)\n            train_loss += loss.item()\n            loss.backward()\n            optimizer.step()\n            num_iter += 1\n        print(f\"Train_Loss: {train_loss / num_iter}\")\n        valid_loss = 0\n        num_iter = 0\n        model.eval()\n        with torch.no_grad():\n            for batch in testloader:\n                input_embeds = batch[\"features\"].to(device)\n                labels = batch[\"labels\"].to(device)\n                labels = labels.unsqueeze(1)\n                labels = labels.float()\n                prediction = model(input_embeds)\n                loss = criterion(prediction, labels)\n                valid_loss += loss.item()\n                num_iter += 1\n        print(f\"Valid Loss: {valid_loss / num_iter}\")","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:18:26.832719Z","iopub.execute_input":"2023-02-14T12:18:26.833083Z","iopub.status.idle":"2023-02-14T12:18:26.844626Z","shell.execute_reply.started":"2023-02-14T12:18:26.833050Z","shell.execute_reply":"2023-02-14T12:18:26.843577Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\nmodel = CNNModel(embed_size = 20, hidden_size = 80).to(device)\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\nnum_epochs = 14","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:18:51.822447Z","iopub.execute_input":"2023-02-14T12:18:51.823073Z","iopub.status.idle":"2023-02-14T12:18:51.834327Z","shell.execute_reply.started":"2023-02-14T12:18:51.823033Z","shell.execute_reply":"2023-02-14T12:18:51.833344Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"training(model, criterion, optimizer, num_epochs, trainloader, testloader)","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:18:58.764418Z","iopub.execute_input":"2023-02-14T12:18:58.765541Z","iopub.status.idle":"2023-02-14T12:20:37.982277Z","shell.execute_reply.started":"2023-02-14T12:18:58.765474Z","shell.execute_reply":"2023-02-14T12:20:37.981020Z"},"trusted":true},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/14 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"Train_Loss: 0.259717046192608\nValid Loss: 0.22581135117345386\nTrain_Loss: 0.22728935652354412\nValid Loss: 0.22027537922064463\nTrain_Loss: 0.21837722591851416\nValid Loss: 0.21734833824965688\nTrain_Loss: 0.2121006790966613\nValid Loss: 0.21554364992512598\nTrain_Loss: 0.20700154293727993\nValid Loss: 0.21099607431226305\nTrain_Loss: 0.20199075041157646\nValid Loss: 0.20594139761394925\nTrain_Loss: 0.19798305479256886\nValid Loss: 0.2025417691303624\nTrain_Loss: 0.19328388931262225\nValid Loss: 0.20504184067249298\nTrain_Loss: 0.19018151062979663\nValid Loss: 0.20297688725921842\nTrain_Loss: 0.1860239866034051\nValid Loss: 0.20501245102948612\nTrain_Loss: 0.1829981916303052\nValid Loss: 0.20225760522815917\nTrain_Loss: 0.17915994742713368\nValid Loss: 0.19993569345937834\nTrain_Loss: 0.1767178886103214\nValid Loss: 0.2106376941005389\nTrain_Loss: 0.1734151418536827\nValid Loss: 0.20385437251793015\n","output_type":"stream"}]},{"cell_type":"code","source":"def evaluate_model(loader):\n    m = nn.Sigmoid()\n    model.eval()\n    ground_truth = []\n    all_prob = []\n    all_predict = []\n    with torch.no_grad():\n        for batch in loader:\n            input_embeds = batch[\"features\"].to(device)\n            labels = batch[\"labels\"].to(device)\n            prediction = model(input_embeds)\n            prediction = prediction.squeeze(1)\n            pred = torch.where(prediction > 0.5, 1, 0)\n            all_predict.append(pred.cpu().numpy())\n            prob = m(prediction)\n            all_prob.append(prob.cpu().numpy())\n            ground_truth.append(labels.cpu().numpy())\n    all_prob = np.concatenate(all_prob)\n    ground_truth = np.concatenate(ground_truth)\n    all_predict = np.concatenate(all_predict)\n    return all_prob, all_predict , ground_truth","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:20:45.442441Z","iopub.execute_input":"2023-02-14T12:20:45.443569Z","iopub.status.idle":"2023-02-14T12:20:45.453196Z","shell.execute_reply.started":"2023-02-14T12:20:45.443501Z","shell.execute_reply":"2023-02-14T12:20:45.452047Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"def print_metrics(**kwargs):\n    return pd.DataFrame(kwargs, index = [0])","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:20:46.280464Z","iopub.execute_input":"2023-02-14T12:20:46.281481Z","iopub.status.idle":"2023-02-14T12:20:46.286652Z","shell.execute_reply.started":"2023-02-14T12:20:46.281439Z","shell.execute_reply":"2023-02-14T12:20:46.285413Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"all_prob, all_predict, ground_truth = evaluate_model(testloader_lw)\nrecall = recall_score(ground_truth, all_predict)\nacc = accuracy_score(ground_truth, all_predict)\nprec = precision_score(ground_truth, all_predict)\nauc = roc_auc_score(ground_truth, all_prob)\nprint_metrics(recall = recall, accracy = acc, precision = prec, roc_auc = auc)","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:20:48.702416Z","iopub.execute_input":"2023-02-14T12:20:48.702950Z","iopub.status.idle":"2023-02-14T12:20:48.986961Z","shell.execute_reply.started":"2023-02-14T12:20:48.702900Z","shell.execute_reply":"2023-02-14T12:20:48.985589Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"     recall   accracy  precision   roc_auc\n0  0.877095  0.914286   0.969136  0.978598","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>recall</th>\n      <th>accracy</th>\n      <th>precision</th>\n      <th>roc_auc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.877095</td>\n      <td>0.914286</td>\n      <td>0.969136</td>\n      <td>0.978598</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"all_prob, all_predict, ground_truth = evaluate_model(testloader_hw)\nrecall = recall_score(ground_truth, all_predict)\nacc = accuracy_score(ground_truth, all_predict)\nprec = precision_score(ground_truth, all_predict)\nauc = roc_auc_score(ground_truth, all_prob)\nprint_metrics(recall = recall, accracy = acc, precision = prec, roc_auc = auc)","metadata":{"execution":{"iopub.status.busy":"2023-02-14T12:20:49.834662Z","iopub.execute_input":"2023-02-14T12:20:49.835049Z","iopub.status.idle":"2023-02-14T12:20:50.367992Z","shell.execute_reply.started":"2023-02-14T12:20:49.835006Z","shell.execute_reply":"2023-02-14T12:20:50.364713Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"     recall  accracy  precision  roc_auc\n0  0.899276  0.91505   0.927856  0.97287","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>recall</th>\n      <th>accracy</th>\n      <th>precision</th>\n      <th>roc_auc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.899276</td>\n      <td>0.91505</td>\n      <td>0.927856</td>\n      <td>0.97287</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#наоборот метрики ","metadata":{},"execution_count":null,"outputs":[]}]}